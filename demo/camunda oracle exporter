package com.vzw.orm;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.vzw.orm.dto.ProcessInstanceValue;
import com.vzw.orm.dto.VariableInstanceValue;

import io.camunda.zeebe.exporter.api.Exporter;
import io.camunda.zeebe.exporter.api.context.Context;
import io.camunda.zeebe.exporter.api.context.Controller;
import io.camunda.zeebe.protocol.record.Record;
import io.camunda.zeebe.protocol.record.ValueType;
import io.camunda.zeebe.protocol.record.value.BpmnElementType;
import io.camunda.zeebe.protocol.record.value.ProcessInstanceRecordValue;

public class OracleExporter implements Exporter {

    private Connection conn;
    private Controller controller;

    @Override
    public void configure(Context context) throws Exception {
        System.out.println("Inside configure method");

        // Replace with your Oracle JDBC URL
        String dbURL = "jdbc:oracle:thin:@localhost:1521:xe";  // Example format
        String username = "oracle_user";
        String password = "oracle_password";

        try {
            conn = DriverManager.getConnection(dbURL, username, password);
            if (conn != null) {
                System.out.println("Connected to Oracle");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public void open(Controller controller) {
        this.controller = controller;
    }

    @Override
    public void export(Record<?> record) {
        this.controller.updateLastExportedRecordPosition(record.getPosition());

        ObjectMapper om = new ObjectMapper();

        if (record.getValueType() == ValueType.PROCESS_INSTANCE) {
            ProcessInstanceValue piv = new ProcessInstanceValue();
            try {
                piv = om.readValue(record.getValue().toJson(), ProcessInstanceValue.class);
            } catch (JsonMappingException | JsonProcessingException e) {
                e.printStackTrace();
            }

            if (piv.getBpmnElementType() != null &&
                piv.getBpmnElementType().equals(BpmnElementType.PROCESS.name())) {
                piv.save(record, conn);
            }

        } else if (record.getValueType() == ValueType.VARIABLE) {
            VariableInstanceValue vv = new VariableInstanceValue();
            try {
                vv = om.readValue(record.getValue().toJson(), VariableInstanceValue.class);
            } catch (JsonMappingException | JsonProcessingException e) {
                e.printStackTrace();
            }

            vv.save(record, conn);
        }
    }

    @Override
    public void close() {
        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();
                System.out.println("Connection closed");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
