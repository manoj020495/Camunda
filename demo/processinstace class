package com.vzw.orm.dto;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;

import io.camunda.zeebe.protocol.record.Record;
import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;

public class ProcessInstanceValue {

    private String tenantId;
    private String bpmnProcessId;
    private String elementId;
    private long parentProcessInstanceKey;
    private long parentElementInstanceKey;
    private Long version;
    private long processDefinitionKey;
    private long processInstanceKey;
    private String bpmnElementType;
    private long flowScopeKey;
    private String bpmnEventType;

    public void save(Record record, Connection conn) {
        PreparedStatement statement = null;

        String sql = "MERGE INTO processinstances t " +
                     "USING (SELECT ? AS processinstancekey FROM dual) s " +
                     "ON (t.processinstancekey = s.processinstancekey) " +
                     "WHEN MATCHED THEN UPDATE SET " +
                     "tenantid=?, bpmnprocessid=?, elementid=?, parentprocessinstancekey=?, " +
                     "parentelementinstancekey=?, version=?, processdefinitionkey=?, " +
                     "bpmnelementtype=?, flowscopekey=?, bpmneventtype=?, " +
                     "exportertimestamp=?, completedtimestamp=? " +
                     "WHEN NOT MATCHED THEN INSERT " +
                     "(processinstancekey, tenantid, bpmnprocessid, elementid, " +
                     "parentprocessinstancekey, parentelementinstancekey, version, " +
                     "processdefinitionkey, bpmnelementtype, flowscopekey, bpmneventtype, " +
                     "exportertimestamp, createdtimestamp) " +
                     "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

        Timestamp exporterTimestamp = new Timestamp(new Date().getTime());
        Timestamp completedTimestamp = (record.getIntent() == ProcessInstanceIntent.ELEMENT_COMPLETED)
                ? new Timestamp(new Date(record.getTimestamp()).getTime())
                : null;

        try {
            statement = conn.prepareStatement(sql);

            // For MERGE matching key
            statement.setLong(1, this.processInstanceKey);

            // For UPDATE SET
            statement.setString(2, this.tenantId);
            statement.setString(3, this.bpmnProcessId);
            statement.setString(4, this.elementId);
            statement.setLong(5, this.parentProcessInstanceKey);
            statement.setLong(6, this.parentElementInstanceKey);
            statement.setLong(7, this.version);
            statement.setLong(8, this.processDefinitionKey);
            statement.setString(9, this.bpmnElementType);
            statement.setLong(10, this.flowScopeKey);
            statement.setString(11, this.bpmnEventType);
            statement.setTimestamp(12, exporterTimestamp);
            if (completedTimestamp != null)
                statement.setTimestamp(13, completedTimestamp);
            else
                statement.setNull(13, java.sql.Types.TIMESTAMP);

            // For INSERT VALUES
            statement.setLong(14, this.processInstanceKey);
            statement.setString(15, this.tenantId);
            statement.setString(16, this.bpmnProcessId);
            statement.setString(17, this.elementId);
            statement.setLong(18, this.parentProcessInstanceKey);
            statement.setLong(19, this.parentElementInstanceKey);
            statement.setLong(20, this.version);
            statement.setLong(21, this.processDefinitionKey);
            statement.setString(22, this.bpmnElementType);
            statement.setLong(23, this.flowScopeKey);
            statement.setString(24, this.bpmnEventType);
            statement.setTimestamp(25, exporterTimestamp);
            statement.setTimestamp(26, new Timestamp(new Date().getTime()));

            int rows = statement.executeUpdate();
            System.out.println("Oracle exporter: rows affected = " + rows);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Getters and setters (abbreviated)
    public String getTenantId() {
        return tenantId;
    }
    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public String getBpmnProcessId() {
        return bpmnProcessId;
    }
    public void setBpmnProcessId(String bpmnProcessId) {
        this.bpmnProcessId = bpmnProcessId;
    }

    public String getElementId() {
        return elementId;
    }
    public void setElementId(String elementId) {
        this.elementId = elementId;
    }

    public long getParentProcessInstanceKey() {
        return parentProcessInstanceKey;
    }
    public void setParentProcessInstanceKey(long parentProcessInstanceKey) {
        this.parentProcessInstanceKey = parentProcessInstanceKey;
    }

    public long getParentElementInstanceKey() {
        return parentElementInstanceKey;
    }
    public void setParentElementInstanceKey(long parentElementInstanceKey) {
        this.parentElementInstanceKey = parentElementInstanceKey;
    }

    public Long getVersion() {
        return version;
    }
    public void setVersion(Long version) {
        this.version = version;
    }

    public long getProcessDefinitionKey() {
        return processDefinitionKey;
    }
    public void setProcessDefinitionKey(long processDefinitionKey) {
        this.processDefinitionKey = processDefinitionKey;
    }

    public long getProcessInstanceKey() {
        return processInstanceKey;
    }
    public void setProcessInstanceKey(long processInstanceKey) {
        this.processInstanceKey = processInstanceKey;
    }

    public String getBpmnElementType() {
        return bpmnElementType;
    }
    public void setBpmnElementType(String bpmnElementType) {
        this.bpmnElementType = bpmnElementType;
    }

    public long getFlowScopeKey() {
        return flowScopeKey;
    }
    public void setFlowScopeKey(long flowScopeKey) {
        this.flowScopeKey = flowScopeKey;
    }

    public String getBpmnEventType() {
        return bpmnEventType;
    }
    public void setBpmnEventType(String bpmnEventType) {
        this.bpmnEventType = bpmnEventType;
    }
}
