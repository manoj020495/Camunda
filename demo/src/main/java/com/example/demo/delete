@JobWorker(type = "user-task-start")
public void handleUserTaskStart(ActivatedJob job) {
log.info("Executing User/Start Job worker");

try {
String processInstanceId = String.valueOf(job.getProcessInstanceKey());
String processDefinitionKey = job.getBpmnProcessId();
String processDefinitionName = job.getElementId(); // BPMN ID of the task
String taskName = job.getElementId();

// === Fetch actual userTaskKey from Tasklist ===
String tasklistUrl = "http://localhost:8080/v1/tasks?filter.processInstanceKey="; + processInstanceId;
RestTemplate restTemplate = new RestTemplate();
ObjectMapper objectMapper = new ObjectMapper();

ResponseEntity<String> response = restTemplate.getForEntity(tasklistUrl, String.class);
JsonNode taskList = objectMapper.readTree(response.getBody());

String userTaskKey = null;

for (JsonNode task : taskList) {
String elementId = task.get("elementId").asText();
if (elementId.equals(processDefinitionName)) {
userTaskKey = task.get("id").asText(); // This is the actual task ID
break;
}
}

if (userTaskKey == null) {
log.error("User Task Key not found for elementId: " + processDefinitionName);
return;
}

// === Save details ===
TaskDetails taskDetails = new TaskDetails();
taskDetails.setTaskInstanceId(userTaskKey); // Now correct
taskDetails.setProcessInstanceId(processInstanceId);
taskDetails.setTaskName(taskName);
taskDetails.setTaskStatus("Assigned");
taskDetails.setTaskCreated(new Timestamp(System.currentTimeMillis()));
taskDetails.setProcessDefinitionKey(processDefinitionKey);
taskDetails.setProcessDefinitionName(processDefinitionName);

CaseDetails caseDetails = processRepository.findByProcessInstanceId(processInstanceId);
if (caseDetails != null) {
taskDetails.setCaseId(caseDetails.getCaseId());
}

taskRepository.save(taskDetails);
log.info("Completed User Start Job worker");

} catch (Exception e) {
log.error("Error in User Start Job worker: {}", e.getMessage(), e);
}
}
