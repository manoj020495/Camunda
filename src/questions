package com.bcf.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.SQLException;

public class RetryExecutor {

    private static final Logger LOG = LoggerFactory.getLogger(RetryExecutor.class);
    private static final int MAX_RETRIES = 5;
    private static final long RETRY_DELAY_MS = 5000;

    public static void executeWithRetry(Runnable operation, String operationName) {
        int attempt = 0;
        while (attempt < MAX_RETRIES) {
            try {
                operation.run();
                return;
            } catch (RuntimeException e) {
                Throwable cause = e.getCause();
                if (cause instanceof SQLException sqlEx) {
                    String msg = sqlEx.getMessage();
                    // Skip retry for known bad SQL/data issues
                    if (msg.contains("ORA-") || msg.contains("invalid number") || msg.contains("constraint")) {
                        LOG.error("Non-retriable error in {}: {}", operationName, msg);
                        return; // skip retry
                    }
                }

                attempt++;
                LOG.warn("Retrying {} (attempt {}/{}): {}", operationName, attempt, MAX_RETRIES, e.getMessage());
                try {
                    Thread.sleep(RETRY_DELAY_MS);
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    LOG.error("Retry interrupted for {}", operationName);
                    return;
                }
            }
        }
        LOG.error("Operation {} failed after {} retries", operationName, MAX_RETRIES);
    }
}
