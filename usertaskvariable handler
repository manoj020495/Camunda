public void handleProcessAudit(Connection connection, Record<?> eventRecord, ProcessInstanceRecordValue processInstance) {
    final String sql = "INSERT INTO CAMUNDA_PROCESS_AUDIT (RECORD_KEY, BPMN_PROCESS_ID, VERSION, PROCESS_DEFINITION_KEY, "
                     + "PROCESS_INSTANCE_KEY, ELEMENT_ID, FLOW_SCOPE_KEY, BPMN_ELEMENT_TYPE, BPMN_EVENT_TYPE, "
                     + "PARENT_PROCESS_INSTANCE_KEY, PARENT_ELEMENT_INSTANCE_KEY, INCIDENT_OCCURRED, TENANT_ID) "
                     + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) "
                     + "ON CONFLICT (RECORD_KEY) DO UPDATE SET "
                     + "BPMN_PROCESS_ID=?, VERSION=?, PROCESS_DEFINITION_KEY=?, PROCESS_INSTANCE_KEY=?, ELEMENT_ID=?, "
                     + "FLOW_SCOPE_KEY=?, BPMN_ELEMENT_TYPE=?, BPMN_EVENT_TYPE=?, "
                     + "PARENT_PROCESS_INSTANCE_KEY=?, PARENT_ELEMENT_INSTANCE_KEY=?, INCIDENT_OCCURRED=?, TENANT_ID=?";

    int incidentFlag = 0;
    String intent = eventRecord.getIntent().name();
    String valueType = eventRecord.getValueType().name();

    log.info("Processing record key={} with intent={} and valueType={}", eventRecord.getKey(), intent, valueType);

    // Incident logic: only applicable for JOB or INCIDENT value types
    if (("JOB".equals(valueType) || "INCIDENT".equals(valueType)) && "FAILED".equals(intent)) {
        incidentFlag = 1;
        log.info("Incident detected (FAILED), setting flag=1 for key={}", eventRecord.getKey());
    } else if ("INCIDENT".equals(valueType) && "RESOLVED".equals(intent)) {
        incidentFlag = 0;
        log.info("Incident resolved (RESOLVED), setting flag=0 for key={}", eventRecord.getKey());
    } else {
        log.debug("No incident update needed for key={} (intent={}, valueType={})", 
                  eventRecord.getKey(), intent, valueType);
    }

    try (PreparedStatement stmt = connection.prepareStatement(sql)) {
        int i = 1;

        // INSERT clause values
        stmt.setLong(i++, eventRecord.getKey());
        stmt.setString(i++, processInstance.getBpmnProcessId());
        stmt.setInt(i++, processInstance.getVersion());
        stmt.setLong(i++, processInstance.getProcessDefinitionKey());
        stmt.setLong(i++, processInstance.getProcessInstanceKey());
        stmt.setString(i++, processInstance.getElementId());
        stmt.setLong(i++, processInstance.getFlowScopeKey());
        stmt.setString(i++, String.valueOf(processInstance.getBpmnElementType()));
        stmt.setString(i++, String.valueOf(processInstance.getBpmnEventType()));
        stmt.setLong(i++, processInstance.getParentProcessInstanceKey());
        stmt.setLong(i++, processInstance.getParentElementInstanceKey());
        stmt.setInt(i++, incidentFlag);
        stmt.setString(i++, processInstance.getTenantId());

        // UPDATE clause values
        stmt.setString(i++, processInstance.getBpmnProcessId());
        stmt.setInt(i++, processInstance.getVersion());
        stmt.setLong(i++, processInstance.getProcessDefinitionKey());
        stmt.setLong(i++, processInstance.getProcessInstanceKey());
        stmt.setString(i++, processInstance.getElementId());
        stmt.setLong(i++, processInstance.getFlowScopeKey());
        stmt.setString(i++, String.valueOf(processInstance.getBpmnElementType()));
        stmt.setString(i++, String.valueOf(processInstance.getBpmnEventType()));
        stmt.setLong(i++, processInstance.getParentProcessInstanceKey());
        stmt.setLong(i++, processInstance.getParentElementInstanceKey());
        stmt.setInt(i++, incidentFlag);
        stmt.setString(i++, processInstance.getTenantId());

        int rowsAffected = stmt.executeUpdate();
        if (rowsAffected > 0) {
            log.info("SQL executed successfully for record key={}", eventRecord.getKey());
        } else {
            log.warn("No rows affected for record key={}", eventRecord.getKey());
        }

    } catch (SQLException e) {
        log.error("SQL error while handling process audit for record key=" + eventRecord.getKey(), e);
    }
}
