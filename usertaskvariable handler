package com.bam1.bacf.exporter.handler;

import com.bam1.bacf.exporter.exception.GlobalExceptionHandler.DatabaseConnectionException;
import io.camunda.zeebe.protocol.record.Record;
import io.camunda.zeebe.protocol.record.value.IncidentRecordValue;
import lombok.extern.slf4j.Slf4j;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

@Slf4j
public class IncidentHandler {

    public void handleIncident(Connection connection, Record<?> eventRecord, IncidentRecordValue incidentValue) {
        log.debug("IncidentHandler: eventRecord = {}, incidentValue = {}", eventRecord, incidentValue);

        String sql = """
            MERGE INTO CAMUNDA_INCIDENT t
            USING (SELECT ? AS RECORD_KEY FROM dual) s
            ON (t.RECORD_KEY = s.RECORD_KEY)
            WHEN MATCHED THEN UPDATE SET
                PROCESS_INSTANCE_KEY = ?,
                PROCESS_DEFINITION_KEY = ?,
                BPMN_PROCESS_ID = ?,
                ELEMENT_ID = ?,
                INCIDENT_STATUS = ?,
                INCIDENT_FLAG = ?,
                ERROR_TYPE = ?,
                ERROR_MSG = ?,
                TENANT_ID = ?
            WHEN NOT MATCHED THEN INSERT (
                RECORD_KEY, PROCESS_INSTANCE_KEY, PROCESS_DEFINITION_KEY, BPMN_PROCESS_ID,
                ELEMENT_ID, INCIDENT_STATUS, INCIDENT_FLAG, ERROR_TYPE, ERROR_MSG, TENANT_ID
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """;

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            int i = 1;

            // USING clause
            stmt.setLong(i++, eventRecord.getKey());

            // UPDATE SET clause
            stmt.setLong(i++, incidentValue.getProcessInstanceKey());
            stmt.setLong(i++, incidentValue.getProcessDefinitionKey());
            stmt.setString(i++, incidentValue.getBpmnProcessId());
            stmt.setString(i++, incidentValue.getElementId());
            stmt.setString(i++, eventRecord.getIntent().name()); // CREATED or RESOLVED
            stmt.setInt(i++, eventRecord.getIntent().name().equals("CREATED") ? 1 : 0);
            stmt.setString(i++, incidentValue.getErrorType() != null ? incidentValue.getErrorType().name() : null);
            stmt.setString(i++, incidentValue.getErrorMessage());
            stmt.setString(i++, eventRecord.getTenantId());

            // INSERT VALUES clause
            stmt.setLong(i++, eventRecord.getKey());
            stmt.setLong(i++, incidentValue.getProcessInstanceKey());
            stmt.setLong(i++, incidentValue.getProcessDefinitionKey());
            stmt.setString(i++, incidentValue.getBpmnProcessId());
            stmt.setString(i++, incidentValue.getElementId());
            stmt.setString(i++, eventRecord.getIntent().name());
            stmt.setInt(i++, eventRecord.getIntent().name().equals("CREATED") ? 1 : 0);
            stmt.setString(i++, incidentValue.getErrorType() != null ? incidentValue.getErrorType().name() : null);
            stmt.setString(i++, incidentValue.getErrorMessage());
            stmt.setString(i++, eventRecord.getTenantId());

            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                log.info("IncidentHandler: SQL executed successfully for record key {}", eventRecord.getKey());
            }

        } catch (SQLException e) {
            log.error("IncidentHandler: SQL execution failed for record key {}. Error = {}", eventRecord.getKey(), e.getMessage());
            throw new DatabaseConnectionException("Database error in IncidentHandler for record key: " + eventRecord.getKey(), e);
        }
    }
}

CREATE TABLE CAMUNDA_INCIDENT (
    RECORD_KEY NUMBER PRIMARY KEY,
    PROCESS_INSTANCE_KEY NUMBER NOT NULL,
    PROCESS_DEFINITION_KEY NUMBER NOT NULL,
    BPMN_PROCESS_ID VARCHAR2(255),
    ELEMENT_ID VARCHAR2(255),
    INCIDENT_STATUS VARCHAR2(50),
    INCIDENT_FLAG NUMBER,
    ERROR_TYPE VARCHAR2(255),
    ERROR_MSG CLOB,
    TENANT_ID VARCHAR2(255)
);
